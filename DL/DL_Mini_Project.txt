!pip install opencv-python


#Download the pre-trained model files for gender and age detection from the internet.
!wget https://raw.githubusercontent.com/spmallick/learnopencv/master/AgeGender/gender_deploy.prototxt

!wget https://github.com/smahesh29/Gender-and-Age-Detection/raw/master/gender_net.caffemodel



#Loads the age and gender detection models using the Caffe framework.
import cv2
age_net = cv2.dnn.readNetFromCaffe('age_deploy.prototxt', 'age_net.caffemodel')
gender_net = cv2.dnn.readNetFromCaffe('gender_deploy.prototxt', 'gender_net.caffemodel')



from google.colab import files
uploaded = files.upload()
import cv2
import numpy as np
from google.colab.patches import cv2_imshow
# Load the uploaded image
image_path = list(uploaded.keys())[0]
frame = cv2.imread(image_path)



# Age and gender labels
AGE_LIST = ['(0-2)', '(4-6)', '(8-12)', '(15-20)',
            '(25-32)', '(38-43)', '(48-53)', '(60-100)']
GENDER_LIST = ['Male', 'Female']
# Model expects input image size: 227x227, with mean subtraction
#Converts a face image into a blob suitable for input to the deep learning model.
#Blob: A normalized image array with specific dimensions (227x227)
def get_blob(face):
    return cv2.dnn.blobFromImage(face, 1.0, (227, 227),
                                 (78.4263377603, 87.7689143744, 114.895847746),
                                 swapRB=False)


# Load OpenCV's pretrained Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
faces = face_cascade.detectMultiScale(gray, 1.3, 5)


for (x, y, w, h) in faces:
    face = frame[y:y+h, x:x+w]
    blob = get_blob(face)
    # Predict Gender
    gender_net.setInput(blob)
    gender_preds = gender_net.forward()
    gender = GENDER_LIST[gender_preds[0].argmax()]
    # Predict Age
    age_net.setInput(blob)
    age_preds = age_net.forward()
    age = AGE_LIST[age_preds[0].argmax()]
    label = f"{gender}, {age}"
    cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
    cv2.putText(frame, label, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 0, 255), 2)

# Show the result
cv2_imshow(frame)
