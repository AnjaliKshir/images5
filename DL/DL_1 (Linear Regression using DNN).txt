import numpy as np
import pandas as pd

boston = pd.read_csv('housing_data.csv')

# Converting the data into pandas dataframe
data = boston
data.head()

# Adding the feature names to the dataframe
feature_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']  # Replace with your actual feature names
data.columns = feature_names

!pip install scikit-learn

# Adding the target variable to the dataset
# Assuming the target variable is named 'MEDV' in the DataFrame
data['PRICE'] = data['MEDV']

data.head()

# Remove rows with any null values
data.dropna(inplace=True)

#Verify that null values have been removed
print(data.isnull().sum())

# Checking the statistics of the data
data.describe()


# X = data[['LSTAT','RM','PTRATIO']]
X = data.iloc[:,:-1]
y= data.PRICE


# Splitting the data into train and test for building the model
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)


# Linear Regression
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()

# Fitting the model
regressor.fit(X_train,y_train)



# Prediction on the test dataset
y_pred = regressor.predict(X_test)

# Predicting RMSE the Test set results
from sklearn.metrics import mean_squared_error
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
print(rmse)

# Scaling the dataset
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Creating the neural network model
import keras
from keras.layers import Dense, Activation,Dropout
from keras.models import Sequential
model = Sequential()
model.add(Dense(128,activation = 'relu',input_dim =14))
model.add(Dense(64,activation = 'relu'))
model.add(Dense(32,activation = 'relu'))
model.add(Dense(16,activation = 'relu'))
model.add(Dense(1))
model.compile(optimizer = 'adam',loss = 'mean_squared_error')

model.fit(X_train, y_train, epochs = 100)

y_pred = model.predict(X_test)

# Predicting RMSE the Test set results
from sklearn.metrics import mean_squared_error
rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))
print(rmse)

